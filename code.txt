Huanjun Zhao 30102350
b0-b9 is special char set for 0-9
81-9A is special char set for A-Z
Tested by b@1e00= x (x is map address)
05-14 is game's special char set
1b, 1c"
1f which colonist hands is up
2d
2E for storing game score
F8 fuel line
32 + 33 = position of the invisible part of the lander
30 + 31 lander ship pixel pos
4e+4f = fuel remaining
3e + 3f = position of the left part of the orbital ship
11 12 13 low midium high Frequency
-- BASIC Stub
1001: 47 10    sre $10          -- 
1003: 0A       asl a            --
1004: 00       brk              --
1005: 9E 20 34 shx $3420, y     --  4; starting address is 4169 => 0x1049
1008: 31 36    and ($36), y     --  1 6;
100A: 39 3A 8F and $8f3a, y     --  9;
100D: 20 14 14 jsr $1414        -- data ?
1010: 14 14    nop $14, x       
1012: 14 14    nop $14, x       
1014: 14 14    nop $14, x
1016: 14 14    nop $14, x
1018: 14 14    nop $14, x
101A: 14 14    nop $14, x
101C: 14 14    nop $14, x
101E: 4C 55 4E jmp $4e55        -- L, U, N  -- 4126
1021: 41 52    eor ($52, x)     -- A, R
1023: 20 52 45 jsr $4552        -- \s, R, E
1026: 53 43    sre ($43), y     -- S, C
1028: 55 45    eor $45, x       -- U, E
102A: 0D 28 43 ora $4328        -- \r, (, C
102D: 29 20    and #$20         -- ), \s
102F: 32       kil              -- 2
1030: 30 31    bmi $1063        -- 0, 1
1032: 36 0D    rol $0d, x       -- 6, \r
1034: 41 4E    eor ($4e, x)     -- A, N
1036: 44 52    nop $52          -- D, R--DREW GROENEVELDT
1038: 45 57    eor $57          -- E, W
103A: 20 47 52 jsr $5247        -- \s, G, R
103D: 4F 45 4E sre $4e45        -- O, E, N
1040: 45 56    eor $56          -- E, V
1042: 45 4C    eor $4c          -- E, L
1044: 44 54    nop $54          -- D, T
1046: 00       brk              
1047: 00       brk
1048: 00       brk

-- machine language program start
1049: 78       sei              -- start of the program, set Interrupt -> disable interrupt
104A: D8       cld              -- clear decimal mode flag (a bit in Processor Status register P), 
                                -- ensure 6502 uses the expected binary arithmetic for all instructions
104B: A9 00    lda #$00         -- A = 0
104D: 8D 0A 90 sta $900a        -- 900a = 0, Frequency for oscillator 1 LOW
1050: 8D 0B 90 sta $900b        -- 900b = 0, Frequency for oscillator 2 MEDIUM
1053: 8D 0C 90 sta $900c        -- 900c = 0, Frequency for oscillator 3 HIGH
1056: 8D 0D 90 sta $900d        -- 900d = 0, Frequency of noise source
1059: 20 38 17 jsr $1738        -- jump to subroutine at $1738: scan the keyboard, return upon no key is pressed

105C: 20 D1 16 jsr $16d1        -- jump to subroutine at $16d1, prepare game states
                                    -- clear the screen, set screen color BLACK
                                    -- character color WHITE
                                    -- part unknown
                                    -- set the timer/fuel and its colors  

105F: 20 C0 14 jsr $14c0        -- jump to subroutine at $14c0
                                    -- load to the main game menu
                                    -- play main menu music

1062: 20 5B 17 jsr $175b        -- jump to subroutine at $175b   
                                    -- set score board to zeros

1065: 20 66 17 jsr $1766        -- jump to subroutine at $1766
                                        -- set the colors for landers on the  bottom right 

1068: A9 02    lda #$02         -- A = 0x02  
106A: 85 1B    sta $1b          -- $1b = A  
106C: A9 00    lda #$00         -- A = 0x00  
106E: 85 1C    sta $1c          -- $1c = A  
1070: A9 32    lda #$32         -- A = 0x32  
1072: 85 2D    sta $2d          -- $2d = A 

1074: 20 90 17 jsr $1790        -- clear the sreen, put up colonists and landers, and set colonists color, load score
1077: 20 D0 17 jsr $17d0        -- game initialization

107A: 20 94 18 jsr $1894        -- play sound
107D: 20 42 17 jsr $1742        -- jump to subroutine $1742, load $9004 to A until zero, TV raster beam line
1080: 20 A9 14 jsr $14a9		-- TODO
1083: 20 DD 13 jsr $13dd		--  game logic?? TODO
1086: 20 00 19 jsr $1900        -- orbital docking pad moving calculation
1089: 20 FB 17 jsr $17fb	-- colonist hands up or down calculation
108C: 20 C7 12 jsr $12c7        -- ??
108F: A5 1D    lda $1d
1091: F0 03    beq $1096
1093: 4C BD 11 jmp $11bd
1096: 20 62 13 jsr $1362
1099: 4C 7A 10 jmp $107a
109C: A9 1E    lda #$1e
109E: 85 15    sta $15
10A0: A9 8A    lda #$8a
10A2: 85 14    sta $14
10A4: A0 00    ldy #$00
10A6: 8C 0D 90 sty $900d
10A9: B9 05 1D lda $1d05, y
10AC: F0 05    beq $10b3
10AE: 91 14    sta ($14), y
10B0: C8       iny
10B1: D0 F6    bne $10a9

-- guess: if press key, run main game, else show demo
10B3: 20 38 17 jsr $1738
10B6: A9 05    lda #$05
10B8: 8D 0E 90 sta $900e        -- bit 0-3 are volume, 4-7 are auxiliary color
10BB: A9 02    lda #$02
10BD: 85 68    sta $68
10BF: A5 2F    lda $2f
10C1: CD 1C 1D cmp $1d1c
10C4: 90 6A    bcc $1130
10C6: F0 61    beq $1129
10C8: A5 2E    lda $2e
10CA: 8D 1B 1D sta $1d1b
10CD: A5 2F    lda $2f
10CF: 8D 1C 1D sta $1d1c
10D2: A9 1E    lda #$1e
10D4: 85 15    sta $15
10D6: A9 B6    lda #$b6
10D8: 85 14    sta $14
10DA: A0 00    ldy #$00
10DC: B9 10 1D lda $1d10, y
10DF: F0 05    beq $10e6
10E1: 91 14    sta ($14), y
10E3: C8       iny
10E4: D0 F6    bne $10dc
10E6: A9 E4    lda #$e4
10E8: 85 14    sta $14
10EA: A0 04    ldy #$04
10EC: A9 E6    lda #$e6
10EE: 91 14    sta ($14), y
10F0: 88       dey
10F1: A9 00    lda #$00
10F3: 91 14    sta ($14), y
10F5: 88       dey
10F6: 10 F4    bpl $10ec
10F8: A9 00    lda #$00
10FA: 85 6B    sta $6b
10FC: 85 6C    sta $6c
10FE: A9 E4    lda #$e4
1100: A4 6C    ldy $6c
1102: 91 14    sta ($14), y                 -- replace # with _ for the user name input
1104: 20 54 11 jsr $1154
1107: A4 C5    ldy $c5
1109: B9 5E EC lda $ec5e, y                 -- 
110C: 49 C0    eor #$c0                     -- Exclusive OR 0C 
110E: A4 6C    ldy $6c                      -- 
1110: 91 14    sta ($14), y                 -- store first character of the user on the screen 
1112: A6 6B    ldx $6b
1114: 9D 1D 1D sta $1d1d, x                 -- store characters of the user name
1117: 20 38 17 jsr $1738                    -- get keyboard ready
111A: E6 6C    inc $6c
111C: E6 6C    inc $6c
111E: E6 6B    inc $6b
1120: A5 6B    lda $6b
1122: C9 03    cmp #$03
1124: D0 D8    bne $10fe
1126: 4C 4B 10 jmp $104b
1129: A5 2E    lda $2e
112B: CD 1B 1D cmp $1d1b
112E: B0 98    bcs $10c8
1130: A9 05    lda #$05
1132: 85 6F    sta $6f
1134: 20 1E EB jsr $eb1e
1137: 20 42 17 jsr $1742        -- jump to subroutine $1742, load $9004 to A until zero, TV raster beam line
113A: 20 94 18 jsr $1894
113D: E6 11    inc $11
113F: D0 07    bne $1148
1141: C6 6F    dec $6f
1143: D0 03    bne $1148
1145: 4C 4B 10 jmp $104b
1148: A5 C5    lda $c5
114A: C9 40    cmp #$40
114C: F0 E6    beq $1134
114E: 20 38 17 jsr $1738
1151: 4C 4B 10 jmp $104b
1154: 20 1E EB jsr $eb1e
1157: 20 42 17 jsr $1742        -- jump to subroutine $1742, load $9004 to A until zero, TV raster beam line
115A: 20 94 18 jsr $1894
115D: A5 C5    lda $c5
115F: C9 40    cmp #$40
1161: F0 F1    beq $1154
1163: 60       rts
1164: A5 1B    lda $1b
1166: 0A       asl a
1167: AA       tax
1168: A9 02    lda #$02
116A: 81 26    sta ($26, x)
116C: A9 00    lda #$00
116E: 85 1D    sta $1d
1170: 20 40 18 jsr $1840
1173: A5 5E    lda $5e
1175: F0 03    beq $117a
1177: 4C 4B 10 jmp $104b
117A: A0 02    ldy #$02
117C: B9 18 00 lda $0018, y
117F: F0 0F    beq $1190
1181: A9 02    lda #$02
1183: 99 18 00 sta $0018, y
1186: 84 1E    sty $1e
1188: 06 1E    asl $1e
118A: A6 1E    ldx $1e
118C: A9 02    lda #$02
118E: 81 20    sta ($20, x)         -- read $20 area offset x
1190: 88       dey
1191: 10 E9    bpl $117c
1193: C6 1B    dec $1b
1195: 30 03    bmi $119a
1197: 4C 77 10 jmp $1077
119A: 4C 9C 10 jmp $109c
119D: A4 1F    ldy $1f
119F: A9 02    lda #$02
11A1: 99 18 00 sta $0018, y
11A4: 84 1E    sty $1e
11A6: 06 1E    asl $1e
11A8: A6 1E    ldx $1e
11AA: A9 02    lda #$02
11AC: 81 20    sta ($20, x)             -- read $20 area
11AE: A9 04    lda #$04
11B0: 85 68    sta $68
11B2: A5 1D    lda $1d
11B4: 30 AE    bmi $1164
11B6: A9 00    lda #$00
11B8: 85 1D    sta $1d
11BA: 4C 96 10 jmp $1096

-- if ship dead?
11BD: C9 8F    cmp #$8f                 -- if the ship return the orbital docking pad
11BF: F0 76    beq $1237
11C1: C9 8C    cmp #$8c
11C3: F0 D8    beq $119d
11C5: C9 0C    cmp #$0c                 -- check if it is 0C <-> colonist
11C7: F0 D4    beq $119d                
11C9: C9 86    cmp #$86
11CB: D0 97    bne $1164
11CD: A5 3A    lda $3a
11CF: 29 10    and #$10
11D1: F0 91    beq $1164
11D3: A5 47    lda $47
11D5: D0 8D    bne $1164
11D7: A5 45    lda $45
11D9: F0 04    beq $11df
11DB: 49 FF    eor #$ff
11DD: D0 85    bne $1164
11DF: 20 38 17 jsr $1738
11E2: A5 3B    lda $3b
11E4: D0 4B    bne $1231
11E6: A9 01    lda #$01
11E8: 85 3B    sta $3b
11EA: A9 17    lda #$17
11EC: 85 3A    sta $3a
11EE: A9 00    lda #$00
11F0: 8D 0D 90 sta $900d
11F3: 85 44    sta $44
11F5: 85 45    sta $45
11F7: 85 46    sta $46
11F9: 85 47    sta $47
11FB: C6 43    dec $43
11FD: 20 14 18 jsr $1814
1200: A2 02    ldx #$02
1202: A0 00    ldy #$00
1204: B5 30    lda $30, x
1206: 99 14 00 sta $0014, y
1209: E8       inx
120A: C8       iny
120B: B5 30    lda $30, x
120D: 99 14 00 sta $0014, y
1210: A2 06    ldx #$06
1212: C8       iny
1213: B5 30    lda $30, x
1215: 99 14 00 sta $0014, y
1218: E8       inx
1219: C8       iny
121A: B5 30    lda $30, x
121C: 99 14 00 sta $0014, y
121F: 20 A9 14 jsr $14a9
1222: 20 DD 13 jsr $13dd
1225: A9 E3    lda #$e3             -- E3: safe landing ground
1227: A2 00    ldx #$00
1229: 86 1D    stx $1d                  -- set 1d to 00 ship pick up a colonist finisheds
122B: 81 14    sta ($14, x)
122D: A2 02    ldx #$02
122F: 81 14    sta ($14, x)
1231: 4C 96 10 jmp $1096
1234: 4C 64 11 jmp $1164
1237: A5 3A    lda $3a
1239: 29 10    and #$10
123B: F0 F7    beq $1234
123D: A5 47    lda $47
123F: C9 FF    cmp #$ff
1241: D0 F1    bne $1234
1243: A5 45    lda $45
1245: D0 ED    bne $1234
1247: 8D 0D 90 sta $900d
124A: 85 1D    sta $1d
124C: A9 00    lda #$00
124E: 85 1E    sta $1e
1250: A0 02    ldy #$02
1252: B9 18 00 lda $0018, y
1255: C9 01    cmp #$01
1257: D0 12    bne $126b
1259: A9 32    lda #$32
125B: 18       clc
125C: 65 1E    adc $1e
125E: 85 1E    sta $1e
1260: 18       clc
1261: 65 2E    adc $2e
1263: 85 2E    sta $2e
1265: A9 00    lda #$00
1267: 65 2F    adc $2f
1269: 85 2F    sta $2f                  -- add store 50: when reattach to orbital docking pad
126B: 88       dey
126C: 10 E4    bpl $1252
126E: A5 1E    lda $1e
1270: C9 96    cmp #$96
1272: D0 1E    bne $1292
1274: 06 1C    asl $1c
1276: E6 1C    inc $1c
1278: A9 32    lda #$32
127A: 38       sec
127B: E5 1C    sbc $1c
127D: 85 2D    sta $2d
127F: A5 4E    lda $4e
1281: 38       sec
1282: E9 CE    sbc #$ce        
1284: 0A       asl a
1285: 0A       asl a
1286: 0A       asl a
1287: 18       clc
1288: 65 2E    adc $2e
128A: 85 2E    sta $2e
128C: A9 00    lda #$00
128E: 65 2F    adc $2f
1290: 85 2F    sta $2f
1292: E6 43    inc $43
1294: A9 80    lda #$80
1296: 85 44    sta $44
1298: A9 01    lda #$01
129A: 85 3B    sta $3b
129C: A9 00    lda #$00
129E: 85 46    sta $46
12A0: 85 47    sta $47
12A2: A5 3A    lda $3a
12A4: 29 37    and #$37
12A6: 85 3A    sta $3a
12A8: A9 03    lda #$03
12AA: 85 68    sta $68
12AC: 20 A9 14 jsr $14a9
12AF: 20 DD 13 jsr $13dd
12B2: 20 00 19 jsr $1900			
12B5: 20 62 13 jsr $1362
12B8: 20 94 18 jsr $1894
12BB: 20 42 17 jsr $1742            -- jump to subroutine $1742, load $9004 to A until zero, TV raster beam line
12BE: A5 41    lda $41
12C0: C9 A7    cmp #$a7
12C2: 90 E8    bcc $12ac
12C4: 4C 74 10 jmp $1074


-- subroutine ship logic, calculate feul and update fuel line
12C7: A5 3A    lda $3a
12C9: 29 37    and #$37
12CB: 85 3A    sta $3a
12CD: A9 00    lda #$00
12CF: 8D 0D 90 sta $900d
12D2: A5 5E    lda $5e
12D4: F0 03    beq $12d9
12D6: 4C 70 19 jmp $1970
12D9: 20 1E EB jsr $eb1e
12DC: A5 C5    lda $c5                  
12DE: C9 11    cmp #$11         - keyboard A
12E0: F0 16    beq $12f8
12E2: C9 09    cmp #$09         - keyboard W
12E4: F0 2A    beq $1310
12E6: C9 12    cmp #$12         - keyboard D
12E8: F0 3A    beq $1324
12EA: C9 20    cmp #$20         - keyboard SPACE
12EC: F0 50    beq $133e
12EE: C9 0F    cmp #$0f         - keyboard enter
12F0: D0 6F    bne $1361
12F2: A9 80    lda #$80         -- if do nothing 
12F4: 85 1D    sta $1d
12F6: D0 69    bne $1361
12F8: A5 3B    lda $3b
12FA: D0 65    bne $1361
12FC: A9 07    lda #$07
12FE: 85 3A    sta $3a
1300: A9 FF    lda #$ff
1302: 85 4B    sta $4b
1304: 85 49    sta $49
1306: A9 F1    lda #$f1
1308: 85 4A    sta $4a
130A: A9 F9    lda #$f9
130C: 85 48    sta $48
130E: D0 51    bne $1361
1310: A9 17    lda #$17
1312: 85 3A    sta $3a
1314: A9 FF    lda #$ff
1316: 85 4B    sta $4b
1318: A9 EF    lda #$ef
131A: 85 4A    sta $4a
131C: A9 00    lda #$00
131E: 85 49    sta $49
1320: 85 48    sta $48
1322: F0 3D    beq $1361
1324: A5 3B    lda $3b
1326: D0 39    bne $1361
1328: A9 27    lda #$27
132A: 85 3A    sta $3a
132C: A9 FF    lda #$ff
132E: 85 4B    sta $4b
1330: A9 F1    lda #$f1
1332: 85 4A    sta $4a
1334: A9 00    lda #$00
1336: 85 49    sta $49
1338: A9 07    lda #$07
133A: 85 48    sta $48
133C: D0 23    bne $1361
133E: A5 4E    lda $4e
1340: C9 CD    cmp #$cd
1342: F0 1D    beq $1361
1344: A9 B5    lda #$b5
1346: 8D 0D 90 sta $900d
1349: A5 3A    lda $3a
134B: 09 08    ora #$08
134D: 85 3A    sta $3a
134F: A9 00    lda #$00
1351: 85 3B    sta $3b
1353: C6 2C    dec $2c
1355: D0 0A    bne $1361


1357: A0 00    ldy #$00
1359: 91 4E    sta ($4e), y   -- change fuel pointer, when pointer to 1FCE, no fuel
135B: C6 4E    dec $4e          
135D: A5 2D    lda $2d
135F: 85 2C    sta $2c
1361: 60       rts



1362: AD 0D 90 lda $900d
1365: F0 1A    beq $1381
1367: 18       clc
1368: A5 48    lda $48
136A: 65 44    adc $44
136C: 85 44    sta $44
136E: A5 49    lda $49
1370: 65 45    adc $45
1372: 85 45    sta $45
1374: 18       clc
1375: A5 4A    lda $4a
1377: 65 46    adc $46
1379: 85 46    sta $46
137B: A5 4B    lda $4b
137D: 65 47    adc $47
137F: 85 47    sta $47
1381: A5 3B    lda $3b
1383: D0 0B    bne $1390
1385: 18       clc
1386: A9 07    lda #$07
1388: 65 46    adc $46
138A: 85 46    sta $46
138C: 90 02    bcc $1390
138E: E6 47    inc $47
1390: 18       clc
1391: A5 44    lda $44
1393: 65 40    adc $40
1395: 85 40    sta $40
1397: A5 45    lda $45
1399: 65 41    adc $41
139B: 85 41    sta $41
139D: C9 A8    cmp #$a8
139F: B0 1D    bcs $13be
13A1: 18       clc
13A2: A5 46    lda $46
13A4: 65 42    adc $42
13A6: 85 42    sta $42
13A8: A5 47    lda $47
13AA: 65 43    adc $43
13AC: 85 43    sta $43
13AE: C9 B0    cmp #$b0
13B0: 90 2A    bcc $13dc
13B2: A9 00    lda #$00
13B4: 85 43    sta $43
13B6: 85 42    sta $42
13B8: 85 46    sta $46
13BA: 85 47    sta $47
13BC: F0 1E    beq $13dc
13BE: 49 FF    eor #$ff
13C0: 29 F0    and #$f0
13C2: F0 0C    beq $13d0
13C4: A9 A7    lda #$a7
13C6: 85 41    sta $41
13C8: A9 00    lda #$00
13CA: 85 3B    sta $3b
13CC: 85 40    sta $40
13CE: F0 06    beq $13d6
13D0: A9 00    lda #$00
13D2: 85 41    sta $41
13D4: 85 40    sta $40
13D6: 85 44    sta $44
13D8: 85 45    sta $45
13DA: F0 C5    beq $13a1
13DC: 60       rts


- subroutine game logic part? TODO
13DD: A5 41    lda $41
13DF: 4A       lsr a
13E0: 4A       lsr a
13E1: 4A       lsr a
13E2: C5 38    cmp $38
13E4: 85 38    sta $38
13E6: F0 1E    beq $1406
13E8: 90 0E    bcc $13f8
13EA: A2 06    ldx #$06
13EC: F6 30    inc $30, x
13EE: D0 02    bne $13f2
13F0: F6 31    inc $31, x
13F2: CA       dex
13F3: CA       dex
13F4: 10 F6    bpl $13ec
13F6: D0 0E    bne $1406
13F8: A2 06    ldx #$06
13FA: B5 30    lda $30, x
13FC: D0 02    bne $1400
13FE: D6 31    dec $31, x
1400: D6 30    dec $30, x
1402: CA       dex
1403: CA       dex
1404: 10 F4    bpl $13fa
1406: A5 43    lda $43
1408: 4A       lsr a
1409: 4A       lsr a
140A: 4A       lsr a
140B: C5 39    cmp $39
140D: 85 39    sta $39
140F: F0 26    beq $1437
1411: 90 13    bcc $1426
1413: A2 06    ldx #$06
1415: A9 16    lda #$16
1417: 18       clc
1418: 75 30    adc $30, x
141A: 95 30    sta $30, x
141C: 90 02    bcc $1420
141E: F6 31    inc $31, x
1420: CA       dex
1421: CA       dex
1422: 10 F1    bpl $1415
1424: D0 11    bne $1437
1426: A2 06    ldx #$06
1428: B5 30    lda $30, x
142A: 38       sec
142B: E9 16    sbc #$16
142D: 95 30    sta $30, x
142F: B0 02    bcs $1433
1431: D6 31    dec $31, x
1433: CA       dex
1434: CA       dex
1435: 10 F1    bpl $1428
1437: A5 43    lda $43
1439: 29 07    and #$07
143B: 09 08    ora #$08
143D: AA       tax
143E: A9 07    lda #$07
1440: 85 1E    sta $1e
1442: A4 3A    ldy $3a
1444: B9 28 1C lda $1c28, y
1447: CA       dex
1448: 9D 08 1C sta $1c08, x			-- 1c08 <-> 1c28
144B: 88       dey
144C: C6 1E    dec $1e
144E: 10 F4    bpl $1444
1450: A5 41    lda $41
1452: 29 07    and #$07
1454: A8       tay
1455: F0 14    beq $146b
1457: A2 07    ldx #$07
1459: 5E 08 1C lsr $1c08, x
145C: 7E 18 1C ror $1c18, x
145F: 5E 10 1C lsr $1c10, x
1462: 7E 20 1C ror $1c20, x
1465: CA       dex
1466: 10 F1    bpl $1459
1468: 88       dey
1469: D0 EC    bne $1457
146B: A2 06    ldx #$06
146D: A0 04    ldy #$04
146F: A1 30    lda ($30, x)         -- read lander position
1471: F0 23    beq $1496
1473: C9 E3    cmp #$e3             -- copmare the 8x8 pixel with e3 -> e3 is safe landing ground
1475: D0 07    bne $147e
1477: 98       tya                  -- if it is safe landing ground -> 
1478: 05 1D    ora $1d

-- no event for ship
147A: 85 1D    sta $1d              -- ship landed at ground -> set 04 into 1d
147C: D0 12    bne $1490            -- if 1d is not 0 -> no event occured, goto 1490 else -> event occured

-- event: hit colonist
147E: C9 0C    cmp #$0c             -- check if it is 0C <-> colonist, the ship hit the colonist
1480: D0 06    bne $1488            -- if not hit the colonist, goto 1488, else handle the event ship hit the colonist
1482: 05 1D    ora $1d
1484: 85 1D    sta $1d              -- if the ship hit the colonist -> set 0c into 1d
1486: D0 0E    bne $1496

-- event: return to orbital docking pad
1488: C9 11    cmp #$11
148A: D0 04    bne $1490
148C: A9 0F    lda #$0f
148E: 85 1D    sta $1d


-- event1: colonist picked up
-- event2: ship dead
-- protential 1d value: 04, 00
1490: A9 80    lda #$80
1492: 05 1D    ora $1d                  -- protential 1d value: 84, 80 -> 80 ship dead, 84 colonist picked up
1494: 85 1D    sta $1d                  -- set 1d value into 1d
1496: 98       tya
1497: 81 30    sta ($30, x)        -- set lander position
1499: 88       dey
149A: CA       dex
149B: CA       dex
149C: 10 D1    bpl $146f
149E: A5 38    lda $38
14A0: 18       clc
14A1: 69 02    adc #$02
14A3: 4A       lsr a
14A4: 4A       lsr a
14A5: 4A       lsr a
14A6: 85 1F    sta $1f
14A8: 60       rts

-- subroutine: 1c08 area into 30 area TODO
14A9: A9 00    lda #$00			-- A = 00
14AB: A2 06    ldx #$06			-- X = 06
14AD: A0 1F    ldy #$1f			-- Y = 1F
14AF: 81 30    sta ($30, x)		-- $30 = X
14B1: 99 08 1C sta $1c08, y		-- 		<-------|
14B4: 88       dey				-- Y -- 		|
14B5: CA       dex				-- X --			|
14B6: CA       dex				-- X -- 		|
14B7: 10 F6    bpl $14af			------------|
14B9: 99 08 1C sta $1c08, y		-- store at Y <--|
14BC: 88       dey				-- Y    		 |
14BD: 10 FA    bpl $14b9		-----------------|
14BF: 60       rts				-- return 

-- subroutine: load main game menu, play main menu music
14C0: A9 05    lda #$05         -- A = 0x05
14C2: 85 6F    sta $6f          -- $6f = 0x05
14C4: 20 83 15 jsr $1583        -- jump to subroutine $1583: generate the map and put on colonists
14C7: A9 1E    lda #$1e         -- A = 0x1e
14C9: 85 15    sta $15          -- $15 = A = 0x1e
14CB: A9 5D    lda #$5d         -- A = 0x5d
14CD: 85 14    sta $14          -- $14 = A = 0x5d
14CF: A0 00    ldy #$00         -- Y = 0
14D1: B9 1E 10 lda $101e, y     -- $(101e + Y) = A                  <------------------------
14D4: C9 0D    cmp #$0d         -- if A == 0d, '\r' <=> 'carriage return'                   |
14D6: F0 07    beq $14df        -- branch equal to 14df      --------                       |
14D8: 49 C0    eor #$c0         -- XOR  A^0xc0 -> A                 |                       |
14DA: 91 14    sta ($14), y     -- $(($14|$15) + Y) = A             |                       |
14DC: C8       iny              -- Y += 1                           |                       |
14DD: D0 F2    bne $14d1        -- branch not equal                 | -----------------------
14DF: A9 8B    lda #$8b         -- A = 0x8b            <-------------
14E1: 85 14    sta $14          -- $14 = A = 0x8b
14E3: A0 00    ldy #$00         -- Y = 0x00
14E5: B9 2B 10 lda $102b, y     -- A = $(102b + Y)                              <----------------
14E8: C9 0D    cmp #$0d         -- check if A = 0x0d                                            |
14EA: F0 0D    beq $14f9        -- branch equal to 14f9                 -----                   |
14EC: C9 43    cmp #$43         -- check if A = 0x43                        |                   |
14EE: D0 02    bne $14f2        -- branch not equal to 14f2                 |   ---------       |
14F0: 49 C0    eor #$c0         -- XOR A ^ 0xc0 -> A                        |           |       |
14F2: 09 80    ora #$80         -- OR  A || 0x80 -> A                       |   <--------       |
14F4: 91 14    sta ($14), y     -- $(($14|$15) + Y) = A                     |                   |
14F6: C8       iny              -- Y += 1                                   |                   |
14F7: D0 EC    bne $14e5        -- branch not equal to zero, ie, if Y!=0    | -------------------
14F9: A9 B2    lda #$b2         -- A = $b2                          <--------
14FB: 85 14    sta $14          -- $14 = A
14FD: A0 00    ldy #$00         -- Y = 00
14FF: B9 34 10 lda $1034, y     -- A = $(1034 + Y)                  <------------
1502: F0 07    beq $150b        -- branch on equal zero         ---------       |
1504: 49 C0    eor #$c0         -- XOR A ^ $c0 -> A                     |       |
1506: 91 14    sta ($14), y     -- $(($14|$15) + Y) = A                 |       |
1508: C8       iny              -- Y += 1                               |       |
1509: D0 F4    bne $14ff        -- branch not equal, i.e, not equal 0   | -------
150B: A9 BE    lda #$be         -- A = 0xbe                  <-----------
150D: 85 14    sta $14          -- $14 = A
150F: A9 1F    lda #$1f         -- A = $1f
1511: 85 15    sta $15          -- $15 = A
1513: A0 00    ldy #$00         -- Y = 0x00
1515: B9 10 1D lda $1d10, y     -- $(1d10 + Y) = A    <----------
1518: F0 05    beq $151f        -- branch equal zero            |    ------------
151A: 91 14    sta ($14), y     -- $(($14|$15) + Y) = A         |               |
151C: C8       iny              -- Y += 1                       |               |
151D: D0 F6    bne $1515        -- branch not equal zero  -------               |
151F: A9 D7    lda #$d7         -- A = 0xd7                         <------------
1521: 85 14    sta $14          -- 
1523: A0 00    ldy #$00
1525: B9 1D 1D lda $1d1d, y
1528: F0 05    beq $152f
152A: 91 14    sta ($14), y
152C: C8       iny
152D: D0 F6    bne $1525
152F: 20 5B 17 jsr $175b         -- set score board to zeros
1532: AD 1C 1D lda $1d1c
1535: 85 1E    sta $1e
1537: F0 09    beq $1542
1539: A2 00    ldx #$00
153B: 20 71 17 jsr $1771
153E: C6 1E    dec $1e
1540: D0 F7    bne $1539
1542: AE 1B 1D ldx $1d1b
1545: F0 03    beq $154a
1547: 20 71 17 jsr $1771
154A: A9 01    lda #$01
154C: 85 68    sta $68
154E: 20 1E EB jsr $eb1e        -- get keyboard input 
1551: 20 42 17 jsr $1742        -- jump to $1742, load $9004 to A until zero, TV raster beam line
1554: 20 94 18 jsr $1894        -- play sound
1557: E6 11    inc $11
1559: D0 0F    bne $156a
155B: C6 6F    dec $6f
155D: D0 0B    bne $156a
155F: A9 00    lda #$00
1561: 85 68    sta $68
1563: A9 01    lda #$01
1565: 85 5E    sta $5e
1567: 4C 2A 17 jmp $172a
156A: A5 C5    lda $c5
156C: C9 40    cmp #$40
156E: F0 DA    beq $154a
1570: 20 38 17 jsr $1738
1573: A9 00    lda #$00
1575: 85 68    sta $68
1577: A9 09    lda #$09
1579: 8D 0E 90 sta $900e        -- bit 0-3 are volume, 4-7 are auxiliary color
157C: A5 11    lda $11
157E: 85 10    sta $10
1580: 4C 2A 17 jmp $172a

--  subroutine: generate the map and put on colonists
1583: A5 11    lda $11      -- A = $11
1585: 85 10    sta $10      -- store A at $10, 
1587: 29 07    and #$07     -- and 0x07 = 0b0111
1589: 09 08    ora #$08     -- or 0x08 = 0b1000
158B: AA       tax          -- transfer A to X, X = A
158C: A9 1E    lda #$1e     -- A = 0x1e
158E: 85 15    sta $15      -- $15 = A
1590: A9 00    lda #$00     -- A = 0
1592: 85 14    sta $14      -- $14 = A = 0
1594: 85 16    sta $16      -- $16 = A = 0
1596: A0 16    ldy #$16     -- Y = 16            <-------------------------------------------
1598: 20 BB 16 jsr $16bb                                                                    |
                        -- subroutine: A = Y; Y = 0x0 if Y positive, Y = 0xff otherwise;    |
                        -- $14 += original Y                                                |
                        -- $15 += 0x0 if Y is positive, other wise 0xff                     |
159B: CA       dex          -- X -= 1                                                       |
159C: 10 F8    bpl $1596    -- branch on plus,      -----------------------------------------
159E: A9 02    lda #$02     -- A = 0x02
15A0: 85 17    sta $17      -- $17 = A = 0x02
15A2: 20 48 17 jsr $1748    -- 
15A5: A5 10    lda $10      
15A7: 29 7F    and #$7f
15A9: 85 1E    sta $1e
15AB: A5 16    lda $16
15AD: C9 03    cmp #$03
15AF: F0 10    beq $15c1
15B1: A5 17    lda $17
15B3: F0 13    beq $15c8
15B5: C9 01    cmp #$01
15B7: D0 32    bne $15eb
15B9: A5 1E    lda $1e
15BB: 09 80    ora #$80
15BD: 85 1E    sta $1e
15BF: 30 2A    bmi $15eb
15C1: A5 17    lda $17
15C3: D0 26    bne $15eb
15C5: 4C FB 17 jmp $17fb
15C8: A0 16    ldy #$16

15CA: 20 BB 16 jsr $16bb
15CD: A9 E3    lda #$e3                 --  E3: safe landing ground
15CF: 91 14    sta ($14), y             --  
15D1: A0 01    ldy #$01                 --
15D3: 20 BB 16 jsr $16bb                --
15D6: A9 E3    lda #$e3                 --  E3: safe landing ground
15D8: 91 14    sta ($14), y             --
15DA: A0 EB    ldy #$eb                 --
15DC: 20 BB 16 jsr $16bb
15DF: C6 17    dec $17
15E1: 10 BF    bpl $15a2
15E3: A9 02    lda #$02
15E5: 85 17    sta $17
15E7: E6 16    inc $16
15E9: D0 B7    bne $15a2
15EB: A5 15    lda $15
15ED: C9 1E    cmp #$1e
15EF: F0 0C    beq $15fd
15F1: A5 14    lda $14
15F3: C9 8C    cmp #$8c
15F5: A5 1E    lda $1e
15F7: 90 0E    bcc $1607
15F9: 09 01    ora #$01
15FB: D0 0A    bne $1607
15FD: A5 14    lda $14
15FF: C9 9A    cmp #$9a                         
1601: A5 1E    lda $1e
1603: B0 02    bcs $1607
1605: 29 FE    and #$fe
1607: 4A       lsr a
1608: 85 1E    sta $1e
160A: 90 12    bcc $161e
160C: A9 CE    lda #$ce                     -- CE = uphill
160E: A0 00    ldy #$00
1610: 91 14    sta ($14), y
1612: A0 EB    ldy #$eb
1614: 20 BB 16 jsr $16bb
1617: A5 1E    lda $1e
1619: 4A       lsr a
161A: 90 6F    bcc $168b
161C: B0 15    bcs $1633
161E: A0 16    ldy #$16
1620: 20 BB 16 jsr $16bb
1623: A9 CD    lda #$cd             -- CD = downhill
1625: 91 14    sta ($14), y
1627: A5 1E    lda $1e
1629: 4A       lsr a
162A: 90 3D    bcc $1669
162C: A0 01    ldy #$01
162E: 20 BB 16 jsr $16bb
1631: F0 1D    beq $1650
1633: 25 1C    and $1c
1635: AA       tax
1636: F0 18    beq $1650
1638: A5 15    lda $15
163A: C9 1F    cmp #$1f
163C: F0 06    beq $1644
163E: A5 14    lda $14
1640: C9 B0    cmp #$b0
1642: 90 0C    bcc $1650
1644: A9 E5    lda #$e5
1646: 91 14    sta ($14), y
1648: A0 EA    ldy #$ea
164A: 20 BB 16 jsr $16bb
164D: CA       dex
164E: D0 E6    bne $1636
1650: A5 1E    lda $1e
1652: 29 40    and #$40
1654: F0 04    beq $165a
1656: A9 E9    lda #$e9
1658: D0 02    bne $165c
165A: A9 CE    lda #$ce                 -- CE =  uphill
165C: 91 14    sta ($14), y
165E: 20 A9 16 jsr $16a9
1661: A0 01    ldy #$01
1663: 20 BB 16 jsr $16bb
1666: 4C DF 15 jmp $15df
1669: 25 1C    and $1c
166B: AA       tax
166C: F0 18    beq $1686
166E: A5 15    lda $15
1670: C9 1E    cmp #$1e
1672: F0 06    beq $167a
1674: A5 14    lda $14
1676: C9 76    cmp #$76
1678: B0 0C    bcs $1686
167A: A0 16    ldy #$16
167C: 20 BB 16 jsr $16bb
167F: A9 E7    lda #$e7
1681: 91 14    sta ($14), y
1683: CA       dex
1684: D0 E6    bne $166c
1686: A0 01    ldy #$01
1688: 20 BB 16 jsr $16bb
168B: A0 16    ldy #$16
168D: 20 BB 16 jsr $16bb
1690: A5 1E    lda $1e
1692: 29 40    and #$40
1694: F0 04    beq $169a
1696: A9 DF    lda #$df                 -- DF = the dock for colonist to stand on
1698: D0 02    bne $169c                
169A: A9 CD    lda #$cd                 -- CD = downhill
169C: 91 14    sta ($14), y
169E: 20 A9 16 jsr $16a9
16A1: A0 17    ldy #$17
16A3: 20 BB 16 jsr $16bb
16A6: 4C DF 15 jmp $15df
16A9: A0 EA    ldy #$ea
16AB: 20 BB 16 jsr $16bb
16AE: A5 16    lda $16
16B0: 0A       asl a
16B1: AA       tax
16B2: A5 14    lda $14
16B4: 95 50    sta $50, x
16B6: A5 15    lda $15
16B8: 95 51    sta $51, x
16BA: 60       rts



-- subroutine: A = Y; Y = 0x00 if Y positive, Y = 0xff otherwise;
-- $14 += original Y
-- $15 += 0x00 if Y is positive, other wise 0xff 
16BB: 98       tya          --  transfer Y to A 
16BC: 10 04    bpl $16c2    --  branch on plus(last operation set positive flag), branch to 16c2    ---------
16BE: A0 FF    ldy #$ff     --  Y = 0xff, N is set                                                          |
16C0: 30 02    bmi $16c4    --  branch on minus, --------                                                   |
16C2: A0 00    ldy #$00     --  Y = 0x00                 |                   <-------------------------------
16C4: 18       clc          --  clear carry     <--------
16C5: 65 14    adc $14      --  A = $14 + (original Y) 3C -> 
16C7: 85 14    sta $14      --  w($14) = A
16C9: 98       tya          --  transfer Y to A, Y is either 0xff or 0x0
16CA: 65 15    adc $15      --  A = $15 + (setted new Y)
16CC: 85 15    sta $15      --  w($15) = A
16CE: A0 00    ldy #$00     --  Y = 00 
16D0: 60       rts          --  return


-- subroutine: I don't understand this subroutine
-- don't understand this part yet
    -- set background Black and border colors WHITE
    -- set default character colors -> WHITE
    -- set the timer color
16D1: A9 FF    lda #$ff     -- A = 0xff
16D3: 8D 05 90 sta $9005    -- store to $9005   
                                                --  (0b11111111)
                                                --  bits 0-3 start of character memory 
                                                --  (default = 0)
                                                --  bits 4-7 is rest of video address
                                                --  (default = F)
16D6: A9 05    lda #$05     -- A = 0x05 = 0b0101
16D8: 8D 0E 90 sta $900e    -- store to $900e
                                                --  set volume to 5, where 0 is the minimum and 15 is the maximum
                                                --  bits 0-3 are volume, 4-7 are auxiliary color
16DB: A9 09    lda #$09     -- A = 0x09         --  0x00001001
16DD: 8D 0F 90 sta $900f    -- store to $900f   
                                                --  Screen and border color register
                                                --  bits 4-7 select background color    -- blackground = BLACK
                                                --  bits 0-2 select border color        -- border = WHITE
                                                --  bit 3 sefects inverted or normal mode -- reversed
16E0: 20 2A 17 jsr $172a    -- clear the screen 
16E3: A2 00    ldx #$00     -- X = 0            -- X = 0
-- set default character colors -> WHITE
-- loop entry                               <------------
16E5: A9 00    lda #$00     -- A = 0                    |   
16E7: 95 00    sta $00, x   -- set $00 - $ff to 0       |   set $(00 + X) to 0, reset zero page variables
16E9: A9 01    lda #$01     -- A = 1                    |   
16EB: 9D 00 96 sta $9600, x -- set $9600 - $96ff to 1   |   set $(9600 + X) to 1 <-> Normal location of COLOR RAM -> default memory location where the color information for each character is stored
16EE: 9D 00 97 sta $9700, x -- set $9700 - $97ff to 1   |   set $(9700 + X) to 1 <-> Set default character colors to WHITE
16F1: E8       inx          -- X += 1                   |   
16F2: D0 F1    bne $16e5    -- loop ff times   ----------   terminate: X overflows => FF times


Unknown ???????
16F4: A9 04    lda #$04     -- A = 0x04 
16F6: 85 11    sta $11      -- $11 = A = 0x04, what does message $11 encode?               
16F8: A9 03    lda #$03     -- A = 0x03 
16FA: 85 1C    sta $1c      -- $1c = A = 0x03, what does message $1c encode?
16FC: A2 0B    ldx #$0b     -- X = 0x0b 


-- 1ccd, 1cd9 area: 
-- loop entry                                  <---------    
16FE: BD CD 1C lda $1ccd, x -- A = $(1ccd + X)          |   -- user basic area
1701: 95 20    sta $20, x   -- $(20 + X) = A            |   -- what is the area around address $20
1703: BD D9 1C lda $1cd9, x -- A = $(1cd9 + X)          |   -- user baisc area
1706: 95 60    sta $60, x   -- $(60 + X) = A            |   -- what is the area around address $60 
1708: CA       dex          -- X -= 1                   |   
1709: 10 F3    bpl $16fe    -- Branch on Result Plus ----   terminate when X is not positive => 10 times
???????


170B: A2 15    ldx #$15     -- X = 0x15
170D: A9 05    lda #$05     -- A = 0x05 
-- set the timer bar and its colors
-- loop entry                                         <------   on $97ce area -- the timer
170F: 9D CE 97 sta $97ce, x -- $(97ce + X) = A = 0x5        |   set to 0x05, why 0x05   -- Green
1712: CA       dex          -- X -= 1                       |   
1713: E0 08    cpx #$08     -- compare X with 0x08          |   
1715: D0 F8    bne $170f    -- if X != 0x08           -------   terminate when X == 0x08, 0x15 -> 0x08 == 13 * 0x05
1717: A9 07    lda #$07     -- A = 0x07
-- 
-- loop entry                                       <-------
1719: 9D CE 97 sta $97ce, x -- $(97ce+x) == A =0x07        |    set to 0x07, why 0x07   -- Yellow
171C: CA       dex          -- X -= 1                      |
171D: E0 02    cpx #$02     -- compare x with 0x02         |
171F: D0 F8    bne $1719    -- if X != 0x02         --------    terminate when X == 0x02, 0x08 -> 0x02 -- 6 * 0x07 
1721: A9 02    lda #$02     -- A = 0x02
-- 
-- loop entry                                         <-------
1723: 9D CE 97 sta $97ce, x -- $(97ce + X) = 0x02            |  set to 0x02, why 0x02   -- Red
1726: CA       dex          -- X -= 1                        |
1727: 10 FA    bpl $1723    -- Branch on result plus  -------   terminate when X == 0, 0x02 -> 0x00  -- 3 * 0x02
1729: 60       rts          -- return 


-- subroutine: zero out addresses $1e00 to $1eff and addresses $1f00 to $1fff, clear the screen
-- 1e00 - 1eff: top half of the screen
-- 1f00 - 1fff: bottom half of the screen 
172A: A2 00    ldx #$00         --  X = 0
172C: A9 00    lda #$00         --  A = 0
172E: 9D 00 1E sta $1e00, x     --  $(1e00+X) = 0
1731: 9D 00 1F sta $1f00, x     --  $(1f00+X) = 0
1734: E8       inx              --  X += 1 
1735: D0 F7    bne $172e        --  branch to $172e, loop for 0xFF times:
                                    If the X register contained $FF before it was incremented (the maximum number the X register can
                                    contain), it will "wrap around" back to zero. If we wanted a program to continue to do something until we had performed the increment
                                    of the X index that pushed it around to zero, we could use the BNE instruction to continue "looping" around, until X became zero.
1737: 60       rts              --  return from the subroutine



-- subroutine: scan the keyboard, return upon no key is pressed (i.e, key release)
1738: 20 1E EB jsr $eb1e    --  "ff9f jsr $eb1e", thus "jsr $eb1e" is same as "jsr $ff9f"
173B: A5 C5    lda $c5      --  A = $c5, address between 0000 - 00FF, in zero page; 
                            --  when no key is pressed, $c65=0x40, 
                                observed from monitoring the address location 0xc5
173D: C9 40    cmp #$40     --  if A == 0x40 <=> no key is pressed 
173F: D0 F7    bne $1738    --          -> back on the start of the subroutine
1741: 60       rts          --  else:   -> return


-- subroutine: load $9004 to A until zero, TV raster beam line.
-- updating the screen?
-- 9004 = GGGGGGGG, G value is used to synchronize the the light pen with the TV picture. 
-- $9004 is an address of VIC chip registers
1742: AD 04 90 lda $9004    -- A = $9004  <-----\
1745: D0 FB    bne $1742    -- if A != 0  ------/           
1747: 60       rts          -- return


-- subroutine
1748: A5 10    lda $10          -- A = $10
174A: 0A       asl a            -- A << 1
174B: 45 10    eor $10          -- XOR $10, A^M -> A, A^0x10 = A^0b00010000 -> A
174D: 85 10    sta $10          -- $10 = A
174F: 4A       lsr a            -- A >> 1
1750: 45 10    eor $10          -- XOR $10, A^M -> A, A^0x10 = A^0b00010000 -> A 
1752: 85 10    sta $10          -- $10 = A
1754: 0A       asl a            -- A << 1
1755: 0A       asl a            -- A << 1
1756: 45 10    eor $10          -- XOR $10, A^M -> A, A^0x10 = A^0b00010000 -> A
1758: 85 10    sta $10          -- $10 = A
175A: 60       rts              -- return 


-- subroutine: set score board to 0000
175B: A9 B0    lda #$b0         -- load char "0"
175D: A0 03    ldy #$03         -- Y = 0x03, loop three times
175F: 99 ED 1F sta $1fed, y     -- print character "0"  
1762: 88       dey              -- ... 
1763: 10 FA    bpl $175f        -- ... 
1765: 60       rts              -- 

-- subroutine: set the colors for landers on the  bottom right 
1766: A2 04    ldx #$04
1768: A9 05    lda #$05
176A: 81 26    sta ($26, x)
                        -- $26|$27 -> 97f4
                        -- 97f4 area: lives color
                                1fe5, e7, e9 and 97e5, e7, e9
176C: CA       dex
176D: CA       dex
176E: 10 F8    bpl $1768
1770: 60       rts

-- subroutine: the player scored, the score to be added is in X register originally. 1fed socre related
1771: A0 03    ldy #$03         -- Y = 03          
1773: B9 ED 1F lda $1fed, y     -- A = 03 
1776: 18       clc              -- clear cycle
1777: 69 01    adc #$01         -- A += 01 
1779: C9 BA    cmp #$ba         -- compare if 9+1-> 进位
177B: D0 0C    bne $1789        -- 1789 not 进位.
177D: A9 B0    lda #$b0         -- A = b0 
177F: 99 ED 1F sta $1fed, y
1782: 88       dey
1783: 10 EE    bpl $1773
1785: CA       dex
1786: D0 E9    bne $1771
1788: 60       rts
1789: 99 ED 1F sta $1fed, y
178C: CA       dex
178D: D0 E2    bne $1771
178F: 60       rts

-- clear the screen, put up colonists and landers, and set colonists color, 
1790: A5 10    lda $10                  -- A = $10 = FF at the first time
1792: 85 11    sta $11                  -- $11 = $10 
1794: 20 2A 17 jsr $172a                -- clear the screen
1797: A9 00    lda #$00                 -- A = 0
1799: 85 18    sta $18                  -- $18 = 0 
179B: 85 19    sta $19                  -- $19 = 0 
179D: 85 1A    sta $1a                  -- $1a = 0
-- loop three times: put up colonists and landers, and set colonists color. 04, 02, 00 three astrronauts or landers counters
179F: A2 04    ldx #$04                 -- X = 04 
17A1: A9 0B    lda #$0b                 -- colonist character set
17A3: 9D E5 1F sta $1fe5, x             -- put colonist on the bottom left 
17A6: A9 07    lda #$07                 -- A = 07
17A8: 9D F4 1F sta $1ff4, x             -- put lander on the bottom right
17AB: A9 05    lda #$05                 -- set colonist color green
17AD: 81 20    sta ($20, x)             -- read $20 area, astrronauts Status color repersentation
17AF: CA       dex                      -- X-- 
17B0: CA       dex                      -- X-- Print a ship every other pixel block, Print colonists every other pixel block,
17B1: 10 EE    bpl $17a1                -- back to top of the loop
17B3: 20 83 15 jsr $1583                -- generate the map, put up colonists
17B6: 20 5B 17 jsr $175b                -- set score board to zeros     


17B9: A5 2F    lda $2f                  -- A = $2f == 0x00
17BB: 85 1E    sta $1e                  -- $1e = $2f == 0x00
17BD: F0 09    beq $17c8                -- if result zero, then go to 17C8
17BF: A2 00    ldx #$00                 -- X = 0x00
17C1: 20 71 17 jsr $1771                -- add score
17C4: C6 1E    dec $1e                  -- $1e is a counter
17C6: D0 F7    bne $17bf                -- if not zero
17C8: A6 2E    ldx $2e                  -- X = $2E -- $the current score
17CA: F0 03    beq $17cf                -- if score is zero, then just return
17CC: 20 71 17 jsr $1771                -- add score
17CF: 60       rts                      -- return



-- subroutine game initialization

-- set third lander to yellow, i.e, the third lander is in use 
17D0: A5 1B    lda $1b                  -- A = $1b = 2 = 0b00000010
17D2: 0A       asl a                    -- A = 0b00000010 << 1 = 0b00000100 = 4
17D3: AA       tax                      -- X = A = 4
17D4: A9 07    lda #$07                 -- A = 07
17D6: 81 26    sta ($26, x)             -- $97f8 = 07 = Yellow -> first lander color yellow -> in use

17D8: 20 5E 19 jsr $195e                -- clear addr 3e+y to 0. 

// Copy 1ce5 area and 1cf5 area to 30 and 40 area
17DB: A2 0F    ldx #$0f                 
17DD: BD E5 1C lda $1ce5, x                     -- load screen area 1cf4 into a, first time is 1d
17E0: 95 30    sta $30, x
17E2: BD F5 1C lda $1cf5, x
17E5: 95 40    sta $40, x
17E7: CA       dex
17E8: 10 F3    bpl $17dd

-- print fuel remaining line
17EA: A2 15    ldx #$15
17EC: A9 F8    lda #$f8
17EE: 9D CE 1F sta $1fce, x
17F1: CA       dex
17F2: 10 FA    bpl $17ee


17F4: A5 2D    lda $2d
17F6: 85 2C    sta $2c
17F8: 4C 83 15 jmp $1583		-- generate the map, put up colonists

17FB: A2 04    ldx #$04
17FD: A0 02    ldy #$02
17FF: B9 18 00 lda $0018, y
1802: D0 0A    bne $180e
1804: A9 0B    lda #$0b		-- colonist character set with hands down
1806: C4 1F    cpy $1f
1808: D0 02    bne $180c
180A: A9 0C    lda #$0c    	-- colonist character set with hands up
180C: 81 50    sta ($50, x)	-- put 2 hands-down colonists, 1 hands-up colonist on the screen
180E: CA       dex
180F: CA       dex
1810: 88       dey
1811: 10 EC    bpl $17ff
1813: 60       rts



1814: A6 1F    ldx $1f
1816: B5 18    lda $18, x
1818: D0 25    bne $183f
181A: A9 01    lda #$01
181C: 95 18    sta $18, x
181E: 06 1F    asl $1f
1820: A6 1F    ldx $1f
1822: A9 00    lda #$00
1824: 81 50    sta ($50, x)
1826: A9 07    lda #$07
1828: 81 20    sta ($20, x)
182A: 18       clc
182B: A9 05    lda #$05                 -- 05 - picking up colonist
182D: AA       tax                      -- X = A = 05
182E: 65 2E    adc $2e                  -- A += $2e, calculate new score
1830: 85 2E    sta $2e                  -- store new score back to $20
1832: A9 00    lda #$00                 -- A = 00 ???
1834: 65 2F    adc $2f                  -- A += $2f ??? so what is 2f
1836: 85 2F    sta $2f                  -- store back to 2f ???
1838: 20 71 17 jsr $1771                -- add score to the scoreboard
183B: A9 03    lda #$03                 
183D: 85 68    sta $68                  
183F: 60       rts
1840: A2 06    ldx #$06
1842: B5 30    lda $30, x
1844: 95 56    sta $56, x
1846: B5 31    lda $31, x
1848: 18       clc
1849: 69 78    adc #$78
184B: 95 57    sta $57, x
184D: A9 02    lda #$02
184F: 81 56    sta ($56, x)
1851: CA       dex
1852: CA       dex
1853: 10 ED    bpl $1842
1855: A9 0F    lda #$0f
1857: 8D 0E 90 sta $900e        -- bit 0-3 are volume, 4-7 are auxiliary color
185A: A0 17    ldy #$17
185C: A2 06    ldx #$06
185E: B9 B5 1C lda $1cb5, y
1861: 81 30    sta ($30, x)
1863: 88       dey
1864: CA       dex
1865: CA       dex
1866: 10 F6    bpl $185e
1868: A2 14    ldx #$14
186A: 20 42 17 jsr $1742        -- jump to $1742, load $9004 to A until zero, TV raster beam line; return until 9004 is zero
186D: 8A       txa
186E: 18       clc
186F: 69 A5    adc #$a5
1871: 85 1E    sta $1e
1873: 98       tya
1874: 65 1E    adc $1e
1876: 8D 0D 90 sta $900d
1879: CA       dex
187A: 10 EE    bpl $186a
187C: 98       tya
187D: 10 DD    bpl $185c
187F: A2 06    ldx #$06
1881: A9 01    lda #$01
1883: 81 56    sta ($56, x)
1885: CA       dex
1886: CA       dex
1887: 10 F8    bpl $1881
1889: A9 00    lda #$00
188B: 8D 0D 90 sta $900d$69
188E: A9 09    lda #$09
1890: 8D 0E 90 sta $900e        -- bit 0-3 are volume, 4-7 are auxiliary color
1893: 60       rts

-- subroutine to play sounds

1894: A4 68    ldy $68
1896: F0 58    beq $18f0
1898: 88       dey
1899: 98       tya
189A: 0A       asl a
189B: A8       tay
189C: A5 13    lda $13
189E: D0 4D    bne $18ed        --
18A0: 8D 0A 90 sta $900a        -- play sounds
18A3: 8D 0B 90 sta $900b
18A6: 8D 0C 90 sta $900c
18A9: B9 60 00 lda $0060, y
18AC: 85 69    sta $69
18AE: B9 61 00 lda $0061, y
18B1: 85 6A    sta $6a
18B3: A4 12    ldy $12
18B5: B1 69    lda ($69), y
18B7: F0 42    beq $18fb
18B9: 10 04    bpl $18bf
18BB: A0 00    ldy #$00
18BD: B1 69    lda ($69), y
18BF: 85 13    sta $13
18C1: C8       iny
18C2: B1 69    lda ($69), y
18C4: 85 1E    sta $1e
18C6: C8       iny
18C7: A9 01    lda #$01
18C9: 25 1E    and $1e
18CB: F0 06    beq $18d3
18CD: B1 69    lda ($69), y
18CF: 8D 0A 90 sta $900a
18D2: C8       iny
18D3: A9 02    lda #$02
18D5: 25 1E    and $1e
18D7: F0 06    beq $18df
18D9: B1 69    lda ($69), y
18DB: 8D 0B 90 sta $900b
18DE: C8       iny
18DF: A9 04    lda #$04
18E1: 25 1E    and $1e
18E3: F0 06    beq $18eb
18E5: B1 69    lda ($69), y
18E7: 8D 0C 90 sta $900c
18EA: C8       iny
18EB: 84 12    sty $12
18ED: C6 13    dec $13
18EF: 60       rts


18F0: A9 00    lda #$00
18F2: 8D 0A 90 sta $900a
18F5: 8D 0B 90 sta $900b
18F8: 8D 0C 90 sta $900c
18FB: 85 68    sta $68
18FD: 85 12    sta $12
18FF: 60       rts


-- subroutine:
1900: A5 4D    lda $4d
1902: 29 01    and #$01
1904: D0 55    bne $195b
1906: A5 3E    lda $3e
1908: C9 2F    cmp #$2f
190A: D0 08    bne $1914
190C: A9 1D    lda #$1d
190E: 85 3F    sta $3f
1910: A9 F0    lda #$f0
1912: 85 3E    sta $3e
1914: A5 4C    lda $4c
1916: 29 07    and #$07
1918: D0 2E    bne $1948
191A: A0 00    ldy #$00
191C: A9 00    lda #$00
191E: 91 3E    sta ($3e), y
1920: E6 3E    inc $3e
1922: D0 02    bne $1926
1924: E6 3F    inc $3f
1926: A2 1F    ldx #$1f
1928: BD 90 1C lda $1c90, x		-- load left  orbital docking pad 
192B: 9D 68 1C sta $1c68, x		-- to image shifting buffer 1c68
192E: CA       dex
192F: 10 F7    bpl $1928
1931: A0 04    ldy #$04
1933: 98       tya
1934: 18       clc
1935: 65 3E    adc $3e
1937: C9 16    cmp #$16
1939: B0 05    bcs $1940
193B: B9 B0 1C lda $1cb0, y	    -- 1cb0 
193E: 91 3E    sta ($3e), y
1940: 88       dey
1941: 10 F0    bpl $1933
1943: E6 4C    inc $4c
1945: 4C 5B 19 jmp $195b
1948: A2 07    ldx #$07
194A: 5E 68 1C lsr $1c68, x    -- orbital docking pad move right
194D: 7E 70 1C ror $1c70, x
1950: 7E 78 1C ror $1c78, x
1953: 7E 80 1C ror $1c80, x
1956: CA       dex
1957: 10 F1    bpl $194a
1959: E6 4C    inc $4c
195B: E6 4D    inc $4d
195D: 60       rts


--  
195E: A0 04    ldy #$04                 -- Y = 4 
1960: 98       tya                      -- A = Y = 4
1961: 18       clc                      -- disable clear set 
1962: 65 3E    adc $3e                  -- A += 3e
1964: C9 16    cmp #$16                 -- 
1966: B0 04    bcs $196c                --
1968: A9 00    lda #$00                 -- A = 0
196A: 91 3E    sta ($3e), y             -- A = 
196C: 88       dey
196D: 10 F1    bpl $1960
196F: 60       rts



1970: 20 1E EB jsr $eb1e
1973: A5 C5    lda $c5
1975: C9 40    cmp #$40
1977: F0 07    beq $1980
1979: A9 00    lda #$00
197B: 85 5E    sta $5e
197D: 4C 4B 10 jmp $104b
1980: A5 6D    lda $6d
1982: D0 12    bne $1996
1984: E6 6E    inc $6e
1986: A6 6E    ldx $6e
1988: BD 20 1D lda $1d20, x
198B: 85 6D    sta $6d
198D: E8       inx
198E: BD 20 1D lda $1d20, x
1991: 86 6E    stx $6e
1993: 4C DE 12 jmp $12de
1996: C6 6D    dec $6d
1998: A6 6E    ldx $6e
199A: BD 20 1D lda $1d20, x
199D: 4C DE 12 jmp $12de



--- null section, data storage area
19A0: FF FF FF isb $ffff, x
19A3: FF FF FF isb $ffff, x
19A6: FF FF FF isb $ffff, x
19A9: FF FF FF isb $ffff, x
19AC: FF FF FF isb $ffff, x
19AF: FF FF FF isb $ffff, x
19B2: FF FF FF isb $ffff, x
19B5: FF FF FF isb $ffff, x
19B8: FF FF FF isb $ffff, x
19BB: FF FF FF isb $ffff, x
19BE: FF FF FF isb $ffff, x
19C1: FF FF FF isb $ffff, x
19C4: FF FF FF isb $ffff, x
19C7: FF FF FF isb $ffff, x
19CA: FF FF FF isb $ffff, x
19CD: FF FF FF isb $ffff, x
19D0: FF FF FF isb $ffff, x
19D3: FF FF FF isb $ffff, x
19D6: FF FF FF isb $ffff, x
19D9: FF FF FF isb $ffff, x
19DC: FF FF FF isb $ffff, x
19DF: FF FF FF isb $ffff, x
19E2: FF FF FF isb $ffff, x
19E5: FF FF FF isb $ffff, x
19E8: FF FF FF isb $ffff, x
19EB: FF FF FF isb $ffff, x
19EE: FF FF FF isb $ffff, x
19F1: FF FF FF isb $ffff, x
19F4: FF FF FF isb $ffff, x
19F7: FF FF FF isb $ffff, x
19FA: FF FF FF isb $ffff, x
19FD: FF FF FF isb $ffff, x
1A00: FF FF FF isb $ffff, x
1A03: FF FF FF isb $ffff, x
1A06: FF FF FF isb $ffff, x
1A09: FF FF FF isb $ffff, x
1A0C: FF FF FF isb $ffff, x
1A0F: FF FF FF isb $ffff, x
1A12: FF FF FF isb $ffff, x
1A15: FF FF FF isb $ffff, x
1A18: FF FF FF isb $ffff, x
1A1B: FF FF FF isb $ffff, x
1A1E: FF FF FF isb $ffff, x
1A21: FF FF FF isb $ffff, x
1A24: FF FF FF isb $ffff, x
1A27: FF FF FF isb $ffff, x
1A2A: FF FF FF isb $ffff, x
1A2D: FF FF FF isb $ffff, x
1A30: FF FF FF isb $ffff, x
1A33: FF FF FF isb $ffff, x
1A36: FF FF FF isb $ffff, x
1A39: FF FF FF isb $ffff, x
1A3C: FF FF FF isb $ffff, x
1A3F: FF FF FF isb $ffff, x
1A42: FF FF FF isb $ffff, x
1A45: FF FF FF isb $ffff, x
1A48: FF FF FF isb $ffff, x
1A4B: FF FF FF isb $ffff, x
1A4E: FF FF FF isb $ffff, x
1A51: FF FF FF isb $ffff, x
1A54: FF FF FF isb $ffff, x
1A57: FF FF FF isb $ffff, x
1A5A: FF FF FF isb $ffff, x
1A5D: FF FF FF isb $ffff, x
1A60: FF FF FF isb $ffff, x
1A63: FF FF FF isb $ffff, x
1A66: FF FF FF isb $ffff, x
1A69: FF FF FF isb $ffff, x
1A6C: FF FF FF isb $ffff, x
1A6F: FF FF FF isb $ffff, x
1A72: FF FF FF isb $ffff, x
1A75: FF FF FF isb $ffff, x
1A78: FF FF FF isb $ffff, x
1A7B: FF FF FF isb $ffff, x
1A7E: FF FF FF isb $ffff, x
1A81: FF FF FF isb $ffff, x
1A84: FF FF FF isb $ffff, x
1A87: FF FF FF isb $ffff, x
1A8A: FF FF FF isb $ffff, x
1A8D: FF FF FF isb $ffff, x
1A90: FF FF FF isb $ffff, x
1A93: FF FF FF isb $ffff, x
1A96: FF FF FF isb $ffff, x
1A99: FF FF FF isb $ffff, x
1A9C: FF FF FF isb $ffff, x
1A9F: FF FF FF isb $ffff, x
1AA2: FF FF FF isb $ffff, x
1AA5: FF FF FF isb $ffff, x
1AA8: FF FF FF isb $ffff, x
1AAB: FF FF FF isb $ffff, x
1AAE: FF FF FF isb $ffff, x
1AB1: FF FF FF isb $ffff, x
1AB4: FF FF FF isb $ffff, x
1AB7: FF FF FF isb $ffff, x
1ABA: FF FF FF isb $ffff, x
1ABD: FF FF FF isb $ffff, x
1AC0: FF FF FF isb $ffff, x
1AC3: FF FF FF isb $ffff, x
1AC6: FF FF FF isb $ffff, x
1AC9: FF FF FF isb $ffff, x
1ACC: FF FF FF isb $ffff, x
1ACF: FF FF FF isb $ffff, x
1AD2: FF FF FF isb $ffff, x
1AD5: FF FF FF isb $ffff, x
1AD8: FF FF FF isb $ffff, x
1ADB: FF FF FF isb $ffff, x
1ADE: FF FF FF isb $ffff, x
1AE1: FF FF FF isb $ffff, x
1AE4: FF FF FF isb $ffff, x
1AE7: FF FF FF isb $ffff, x
1AEA: FF FF FF isb $ffff, x
1AED: FF FF FF isb $ffff, x
1AF0: FF FF FF isb $ffff, x
1AF3: FF FF FF isb $ffff, x
1AF6: FF FF FF isb $ffff, x
1AF9: FF FF FF isb $ffff, x
1AFC: FF FF FF isb $ffff, x
1AFF: FF FF FF isb $ffff, x
1B02: FF FF FF isb $ffff, x
1B05: FF FF FF isb $ffff, x
1B08: FF FF FF isb $ffff, x
1B0B: FF FF FF isb $ffff, x
1B0E: FF FF FF isb $ffff, x
1B11: FF FF FF isb $ffff, x
1B14: FF FF FF isb $ffff, x
1B17: FF FF FF isb $ffff, x
1B1A: FF FF FF isb $ffff, x
1B1D: FF FF FF isb $ffff, x
1B20: FF FF FF isb $ffff, x
1B23: FF FF FF isb $ffff, x
1B26: FF FF FF isb $ffff, x
1B29: FF FF FF isb $ffff, x
1B2C: FF FF FF isb $ffff, x
1B2F: FF FF FF isb $ffff, x
1B32: FF FF FF isb $ffff, x
1B35: FF FF FF isb $ffff, x
1B38: FF FF FF isb $ffff, x
1B3B: FF FF FF isb $ffff, x
1B3E: FF FF FF isb $ffff, x
1B41: FF FF FF isb $ffff, x
1B44: FF FF FF isb $ffff, x
1B47: FF FF FF isb $ffff, x
1B4A: FF FF FF isb $ffff, x
1B4D: FF FF FF isb $ffff, x
1B50: FF FF FF isb $ffff, x
1B53: FF FF FF isb $ffff, x
1B56: FF FF FF isb $ffff, x
1B59: FF FF FF isb $ffff, x
1B5C: FF FF FF isb $ffff, x
1B5F: FF 			isb
--- end of null parts


-- audio data part
1B60: 25 07  $0725, x
1B62: E1 CF    sbc ($cf, x)
1B64: AF 21 00 lax $0021
1B67: 12       kil
1B68: 01 E1    ora ($e1, x)
1B6A: 10 00    bpl $1b6c
1B6C: 12       kil
1B6D: 01 E1    ora ($e1, x)
1B6F: 10 00    bpl $1b71
1B71: 12       kil
1B72: 01 E1    ora ($e1, x)
1B74: 10 00    bpl $1b76
1B76: 25 07    and $07
1B78: E1 CB    sbc ($cb, x)
1B7A: B3 21    lax ($21), y
1B7C: 00       brk
1B7D: 12       kil
1B7E: 02       kil
1B7F: CB 10    sbx #$10
1B81: 00       brk
1B82: 12       kil
1B83: 02       kil
1B84: CB 10    sbx #$10
1B86: 00       brk
1B87: 12       kil
1B88: 02       kil
1B89: CB 10    sbx #$10
1B8B: 00       brk
1B8C: 25 07    and $07
1B8E: E1 CB    sbc ($cb, x)
1B90: B7 21    lax $21, y
1B92: 00       brk
1B93: 12       kil
1B94: 04 B7    nop $b7
1B96: 10 00    bpl $1b98
1B98: 12       kil
1B99: 04 B7    nop $b7
1B9B: 10 00    bpl $1b9d
1B9D: 12       kil
1B9E: 04 B7    nop $b7
1BA0: 10 00    bpl $1ba2
1BA2: 37 07    rla $07, x
1BA4: E1 CB    sbc ($cb, x)
1BA6: B3 34    lax ($34), y
1BA8: 00       brk
1BA9: 33 00    rla ($00), y
1BAB: FF 00 00 isb $0000, x
1BAE: 00       brk
1BAF: 00       brk
1BB0: 25 06    and $06
1BB2: D7 BB    dcp $bb, x
1BB4: 25 06    and $06
1BB6: D1 B7    cmp ($b7), y
1BB8: 25 06    and $06
1BBA: D7 BB    dcp $bb, x
1BBC: 25 06    and $06
1BBE: C9 A3    cmp #$a3
1BC0: 25 02    and $02
1BC2: CF 25 02 dcp $0225
1BC5: C9 25    cmp #$25
1BC7: 06 DB    asl $db
1BC9: C3 25    dcp ($25, x)
1BCB: 06 D7    asl $d7
1BCD: BB 25 06 las $0625, y
1BD0: DB C3 25 dcp $25c3, y
1BD3: 06 CF    asl $cf
1BD5: AF 25 02 lax $0225
1BD8: D4 25    nop $25, x
1BDA: 02       kil
1BDB: CF FF 00 dcp $00ff
1BDE: 00       brk
1BDF: 00       brk
1BE0: 03 02    slo ($02, x)
1BE2: E0 03    cpx #$03
1BE4: 02       kil
1BE5: E4 03    cpx $03
1BE7: 02       kil
1BE8: E8       inx
1BE9: 03 02    slo ($02, x)
1BEB: EC 03 02 cpx $0203
1BEE: F0 00    beq $1bf0
1BF0: 03 02    slo ($02, x)
1BF2: E0 03    cpx #$03
1BF4: 02       kil
1BF5: DC 03 02 nop $0203, x
1BF8: D8       cld
1BF9: 03 02    slo ($02, x)
1BFB: D4 03    nop $03, x
1BFD: 02       kil
1BFE: D0 00    bne $1c00

-- special characters set memory area
-- 00  reserved for ship - currently not used
1C00: 00       brk
1C01: 00       brk
1C02: 00       brk
1C03: 00       brk
1C04: 00       brk
1C05: 00       brk
1C06: 00       brk
1C07: 00       brk

-- 01-04-> when ship is moving, it can only oucupy 4 8*8 pixels  0407 6pm finding
-- 01 -- shifting ship left top part
1C08: 00       brk
1C09: 00       brk
1C0A: 00       brk
1C0B: 00       brk
1C0C: 00       brk
1C0D: 00       brk
1C0E: 00       brk
1C0F: 00       brk

-- 02 -- shifting ship left bottom part
1C10: 00       brk
1C11: 00       brk
1C12: 00       brk
1C13: 00       brk
1C14: 00       brk
1C15: 00       brk
1C16: 00       brk
1C17: 00       brk

-- 03 -- shifting ship right top part
1C18: 00       brk
1C19: 00       brk
1C1A: 00       brk
1C1B: 00       brk
1C1C: 00       brk
1C1D: 00       brk
1C1E: 00       brk
1C1F: 00       brk

-- 04 -- shifting ship right bottom part
1C20: 00       brk
1C21: 00       brk
1C22: 00       brk
1C23: 00       brk
1C24: 00       brk
1C25: 00       brk
1C26: 00       brk
1C27: 00       brk

-- 05
1C28: F8       sed
1C29: 84 82    sty $82
1C2B: 9F 90 50 sha $5090, y
1C2E: 30 10    bmi $1c40
                        -- 1c28  X X X X X . . .
                        -- 1c29  X . . . . X . .
                        -- 1c2a  X . . . . . X .
                        -- 1c2b  X . . X X X X X 
                        -- 1c2c  X . . X . . . .
                        -- 1c2d  . X . X . . . .
                        -- 1c2e  . . X X . . . .
                        -- 1c2f  . . . X . . . .

-- 06
1C30: F8       sed
1C31: 84 82    sty $82
1C33: 9F 92 52 sha $5292, y
1C36: 3E 10 
                        -- 1c30  X X X X X . . .
                        -- 1c31  X . . . . X . .
                        -- 1c32  X . . . . . X .
                        -- 1c33  X . . X X X X X
                        -- 1c34  X . . X . . X .
                        -- 1c35  . X . X . . X .
                        -- 1c36  . . X X X X X .
                        -- 1c37  . . . X . . . .

-- 07
1C38:    18 rol $1810, x
1C39: 24 42    bit $42
1C3B: 81 99    sta ($99, x)
1C3D: A5 C3    lda $c3
1C3F: 81 
                        -- 1c38  . . . X X . . .
                        -- 1c39  . . X . . X. .
                        -- 1c3a  . X . . . . X .
                        -- 1c3b  X . . . . . . X
                        -- 1c3c  X . . X X . . X
                        -- 1c3d  X . X . . X . X
                        -- 1c3e  X X . . . . X X
                        -- 1c3f  X . . . . . . X

-- 08
        18    sta ($18, x)
1C41: 24 42    bit $42
1C43: 81 99    sta ($99, x)
1C45: A5 E7    lda $e7
1C47: 99 
                        -- 1c40  . . . X X . . .
                        -- 1c41  . . X . . X . .
                        -- 1c42  . X . . . . X .
                        -- 1c43  X . . . . . . X
                        -- 1c44  X . . X X . . X
                        -- 1c45  X . X . . X . X
                        -- 1c46  X X X . .X X  X
                        -- 1c47  X . . X X . . X

-- 09
        1F 21 sta $211f, y
1C4A: 41 F9    eor ($f9, x)
1C4C: 09 0A    ora #$0a
1C4E: 0C 08 
                        --  1c48  . . . X X X X X
                        --  1c49  . . X . . . . X
                        --  1c4a  . X . . . . . X 
                        --  1c4b  X X X X X . . X
                        --  1c4c  . . . . X . . X
                        --  1c4d  . . . . X . X . 
                        --  1c4e  . . . . X X . .
                        --  1c4f  . . . . X . . .
            
-- 0A
            1F nop $1f08
1C51: 21 41    and ($41, x)
1C53: F9 49 4A sbc $4a49, y
1C56: 7C 08 
                        -- 1c50  . . . X X X X X
                        -- 1c51  . . X . . . . X
                        -- 1c52  . X . . . . . X
                        -- 1c53  X X X X X . . X
                        -- 1c54  . X . . X . . X
                        -- 1c55  . X . . X . X . 
                        -- 1c56  . X X X X X . .
                        -- 1c57  . . . . X . . . 
            
-- 0B
            18 nop $1808, x
1C59: 24 18    bit $18
1C5B: 3C 5A 99 nop $995a, x
1C5E: 24 24    bit $24

                        -- 1c57  . . . . X . . .
                        -- 1c58  . . . X X . . .
                        -- 1c59  . . X . . X . .
                        -- 1c5a  . . . X X . . .
                        -- 1c5b  . . X X X X . .
                        -- 1c5c  . X . X X . X .
                        -- 1c5d  X . . X X . . X
                        -- 1c5e  . . X . . X . .
                        -- 1c5f  . . X . . X . .
-- 0C
1C60: 18       clc
1C61: A5 5A    lda $5a
1C63: 3C 18 18 nop $1818, x
1C66: 24 24    bit $24
                        -- 1c60  . . . X X . . .
                        -- 1c61  X . X . . X . X
                        -- 1c62  . X . X X . X .
                        -- 1c63  . . X X X X . .
                        -- 1c64  . . . X X . . .
                        -- 1c65  . . . X X . . .
                        -- 1c66  . . X . . X . .
                        -- 1c67  . . X . . X . .



-- image shifting buffer area
1C68: 00       brk
1C69: 00       brk
1C6A: 00       brk
1C6B: 00       brk
1C6C: 00       brk
1C6D: 00       brk
1C6E: 00       brk
1C6F: 00       brk
1C70: 00       brk
1C71: 00       brk
1C72: 00       brk
1C73: 00       brk
1C74: 00       brk
1C75: 00       brk
1C76: 00       brk
1C77: 00       brk
1C78: 00       brk
1C79: 00       brk
1C7A: 00       brk
1C7B: 00       brk
1C7C: 00       brk
1C7D: 00       brk
1C7E: 00       brk
1C7F: 00       brk
1C80: 00       brk
1C81: 00       brk
1C82: 00       brk
1C83: 00       brk
1C84: 00       brk
1C85: 00       brk
1C86: 00       brk
1C87: 00       brk


1C88: FF 00 00 isb $0000, x
1C8B: 00       brk
1C8C: 00       brk
1C8D: 00       brk
1C8E: 00       brk
1C8F: FF        orbital docking pad middle
                -- 1c88  X X X X X X X X
                -- 1c89  . . . . . . . .
                -- 1c8a  . . . . . . . .
                -- 1c8b  . . . . . . . .
                -- 1c8c  . . . . . . . .
                -- 1c8d  . . . . . . . .
                -- 1c8e  . . . . . . . .
                -- 1c8f  X X X X X X X X

-- 0D
07 1A isb $1a07, x
1C92: 24 48    bit $48
1C94: 58       cli
1C95: A4 C2    ldy $c2
1C97: 81        left orbital docking pad
                -- 1c90  . . . . . X X X
                -- 1c91  . . . X X . X .
                -- 1c92  . . X . . X . .
                -- 1c93  . X . . X . . .
                -- 1c94  . X . X X . . .
                -- 1c95  X . X . . X . .
                -- 1c96  X X . . . . X .
                -- 1c97  X . . . . . .X

-- 0E
FF    sta ($ff, x)
1C99: 00       brk
1C9A: 00       brk
1C9B: 00       brk
1C9C: 00       brk
1C9D: 00       brk
1C9E: 00       brk
1C9F: FF        middle spacecraft
                -- 1c98  X X X X X X X X
                -- 1c99  . . . . . . . .
                -- 1c9a  . . . . . . . .
                -- 1c9b  . . . . . . . .
                -- 1c9c  . . . . . . . .
                -- 1c9d  . . . . . . . .
                -- 1c9e  . . . . . . . .
                -- 1c9f  X X X X X X X X

        E0 58 isb $58e0, x
1CA2: 24 12    bit $12
1CA4: 1A       nop
1CA5: 25 43    and $43
1CA7: 81        right spacecraft
                -- 1ca0  X X X . . . . . 
                -- 1ca1  . X . X X . . .
                -- 1ca2  . . X . . X . .
                -- 1ca3  . . . X . . X .
                -- 1ca4  . . . X X . X .
                -- 1ca5  . . X . . X . X
                -- 1ca6  . X . . . . X X
                -- 1ca7  X . . . . . . X



1CA8: 00    sta ($00, x)
1CA9: 00       brk
1CAA: 00       brk
1CAB: 00       brk
1CAC: 00       brk
1CAD: 00       brk
1CAE: 00       brk
1CAF: 00       brk


1CB0: 0D 0E 11 ora $110e
1CB3: 0F 10 00 slo $0010
1CB6: 00       brk
1CB7: 00       brk


1CB8: 00       brk
1CB9: FD EE ED sbc $edee, x
1CBC: F0 FE    beq $1cbc
1CBE: FB FC 


1cc0: EC isb $ecfc, y
1CC1: CE CD CD dec $cdcd
1CC4: CE D5 CA dec $cad5
1CC7: C9 CB    cmp #$cb
1CC9: 00       brk
1CCA: 00       brk
1CCB: 00       brk
1CCC: 00       brk
1CCD: E5 97    sbc $97
1CCF: E7 97    isb $97
1CD1: E9 97    sbc #$97
1CD3: F4 97    nop $97, x
1CD5: F6 97    inc $97, x
1CD7: F8       sed
1CD8: 97 60    sax $60, y
1CDA: 1B B0 1B slo $1bb0, y
1CDD: E0 1B    cpx #$1b
1CDF: F0 1B    beq $1cfc
1CE1: 00       brk
1CE2: 00       brk
1CE3: 00       brk
1CE4: 00       brk

-- 30 - 3F maybe glook?
1CE5: 2E 1E 44 rol $441e
1CE8: 1E 2F 1E asl $1e2f, x
1CEB: 45 1E    eor $1e
1CED: 02       kil
1CEE: 02       kil
1CEF: 17 01    slo $01, x
1CF1: FF 03 FF isb $ff03, x
1CF4: 1D	   ora    

-- 40 - 4F
1CF5: 00 10    $1000, x
1CF7: 00       brk
1CF8: 10 80    bpl $1c7a
1CFA: 00       brk
1CFB: 00       brk
1CFC: 00       brk
1CFD: 00       brk
1CFE: 00       brk
1CFF: EF FF 00 isb $00ff



1D02: 00       brk
1D03: E3 1F    isb ($1f, x)


1D05: 87 81    sax $81
1D07: 8D 85 A0 sta $a085
1D0A: 8F 96 85 sax $8596
1D0D: 92       kil
1D0E: A1 00    lda ($00, x)
1D10: 88       dey
1D11: 89 87    nop #$87
1D13: 88       dey
1D14: A0 93    ldy #$93         -- 17DD modify
1D16: 83 8F    sax ($8f, x)
1D18: 92       kil
1D19: 85 00    sta $00
1D1B: 00       brk
1D1C: 00       brk
1D1D: 00       brk      -- first character of the user name
1D1E: 00       brk      -- second character of the user name
1D1F: 00       brk      -- third charactter of the user name
1D20: 00       brk
1D21: 02       kil
1D22: 20 01 11 jsr $1101
1D25: 20 40 12 jsr $1240
1D28: 20 01 09 jsr $0901
1D2B: 35 40    and $40, x
1D2D: 35 20    and $20, x
1D2F: 50 40    bvc $1d71
1D31: 20 20 01 jsr $0120
1D34: 12       kil
1D35: 10 40    bpl $1d77
1D37: 15 20    ora $20, x
1D39: 25 40    and $40
1D3B: 01 11    ora ($11, x)
1D3D: 15 20    ora $20, x
1D3F: 01 09    ora ($09, x)
1D41: 68       pla
1D42: 40       rti
1D43: 40       rti
1D44: 20 01 12 jsr $1201
1D47: 10 40    bpl $1d89
1D49: 10 20    bpl $1d6b
1D4B: 01 09    ora ($09, x)
1D4D: 25 40    and $40
1D4F: 15 20    ora $20, x
1D51: 01 11    ora ($11, x)
1D53: 25 40    and $40
1D55: 13 20    slo ($20), y
1D57: 01 09    ora ($09, x)
1D59: 10 40    bpl $1d9b
1D5B: 20 20 15 jsr $1520
1D5E: 40       rti
1D5F: 01 12    ora ($12, x)
1D61: 10 40    bpl $1da3
1D63: 10 20    bpl $1d85
1D65: 10 40    bpl $1da7
1D67: 01 09    ora ($09, x)
1D69: 10 40    bpl $1dab
1D6B: 10 20    bpl $1d8d
1D6D: 01 11    ora ($11, x)
1D6F: 13 20    slo ($20), y
1D71: 01 09    ora ($09, x)
1D73: 25 40    and $40
1D75: 10 20    bpl $1d97
1D77: 10 40    bpl $1db9
1D79: 10 20    bpl $1d9b
